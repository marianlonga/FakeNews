#TODO: change histogram to bar chart
#TODO: change current histograms to continuous versions for continuous features (eg num followers)
#TODO: add derived features (eg num caps in username)

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy import stats
import seaborn as sns
import sys

sns.set(color_codes=True)

INPUT_FILE_NAME = '/Users/longaster/Desktop/UROP2017/fakenews/marian/twitter_data_OneMonth_20170731.csv'

# read csv file
data = pd.read_csv(INPUT_FILE_NAME)
data = data.dropna(subset=['is_fake_news_2'])
data = data.drop((data['is_fake_news_2'] == 'UNKNOWN').astype(int))
data['fake'] = (data['is_fake_news_2'] == 'TRUE').astype(int)
data['user_verified'] = data['user_verified'].astype(int)
data['num_urls'] = data['num_urls'].astype(int)
data_fake = data[data['fake'] == 1]
data_other = data[data['fake'] == 0]

#fig, ax = plt.subplots()
#plt_user_followers_count = sns.kdeplot(np.log10(data_fake['user_followers_count']), shade=True, ax=ax)
#plt_user_followers_count = sns.kdeplot(np.log10(data_other['user_followers_count']), shade=True, ax=ax)
#plt_user_followers_count.set(xlim=(1,9))
#plt.show()

# plots


#fig, ax = plt.subplots()
#sns.barplot(x='num_urls', y='a', hue='fake', data=data, estimator=lambda a: len(a) / len(data), ax=ax)
#plt.show()

#sys.exit()

# plot continuous features
continuous_features = ['retweet_count', 'user_friends_count', 'user_followers_count',
                    'user_favourites_count']
for feature in continuous_features:
    fig, ax = plt.subplots()
    sns.kdeplot(np.log10(data_fake[feature][data_fake[feature] != 0]), shade=True, ax=ax)
    sns.kdeplot(np.log10(data_other[feature][data_other[feature] != 0]), shade=True, ax=ax)
    plt.savefig('plots/' + feature + '.png')

# plot discrete features
discrete_features = ['user_verified', 'geo_coordinates_available', 'num_hashtags', 'num_mentions',
                     'num_urls', 'num_media']
weights_fake = np.ones(data_fake.shape[0])/len(data_fake)
weights_other = np.ones(data_other.shape[0])/len(data_other)
weights = [weights_fake, weights_other]
colors = ['red', 'green']
for feature in discrete_features:
    plt.figure(figsize=(10, 5))
    plt.hist([np.ravel(data_fake[feature]), np.ravel(data_other[feature])], weights=weights, color=colors)
    plt.xlabel(feature)
    plt.ylabel("normalised density of tweets")
    plt.title("Distribution of tweets by feature '" + feature + "'")
    plt.savefig('plots/' + feature + '.png')

# # plot graphs
# #plt.hist([np.ravel(data_fake['num_urls'])], normed=True, bins=3)
# weights_fake = np.ones(data_fake.shape[0])/len(data_fake)
# weights_other = np.ones(data_other.shape[0])/len(data_other)
# weights = [weights_fake, weights_other]
# colors = ['red', 'green']
# for feature in features:
#     plt.figure(figsize=(10, 5))
#     plt.hist([np.ravel(data_fake[feature]), np.ravel(data_other[feature])], weights=weights, color=colors)
#     plt.xlabel(feature)
#     plt.ylabel("normalised density of tweets")
#     plt.title("Distribution of tweets by feature '" + feature + "'")
#     plt.savefig('plots/' + feature + '.png')


# calculate statistics
#features = ['tweet_id', 'created_at', 'retweet_count', 'text', 'user_screen_name', 'is_fake_news_1', 'is_fake_news_2', 'fake_news_category_1', 'fake_news_category_2', 'user_verified', 'user_friends_count', 'user_followers_count', 'user_favourites_count', 'tweet_source', 'geo_coordinates_available', 'num_hashtags', 'num_mentions', 'num_urls', 'num_media', 'fake']
#features = ['tweet_id', 'retweet_count', 'user_verified', 'user_friends_count', 'user_followers_count',
#            'user_favourites_count', 'geo_coordinates_available', 'num_hashtags',
#            'num_mentions', 'num_urls', 'num_media']
# calculate statistics
statistics_features = ['tweet_id', 'retweet_count', 'user_verified', 'user_friends_count', 'user_followers_count',
            'user_favourites_count', 'geo_coordinates_available', 'num_hashtags',
            'num_mentions', 'num_urls', 'num_media']
statistics = []
for feature in statistics_features:
    t, p = stats.ttest_ind(data_fake[feature].values, data_other[feature].values)
    statistics.append([feature, t, p])

# print statistics
template = '{0:30} {1:30} {2:30}'
print(template.format("FEATURE", "T TEST", "P VALUE"))
for statistic in statistics:
    #print(statistic)
    print(template.format(*statistic))

